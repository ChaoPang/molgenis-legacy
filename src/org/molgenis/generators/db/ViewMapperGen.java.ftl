<#--helper functions-->
<#include "GeneratorHelper.ftl">

<#--#####################################################################-->
<#--                                                                   ##-->
<#--         START OF THE OUTPUT                                       ##-->
<#--                                                                   ##-->
<#--#####################################################################-->
/* File:        ${model.getName()}/model/${Name(view)}Mapper.java
 * Copyright:   Inventory 2000-${year?c}, GBIC 2004-${year?c}, all rights reserved
 * Date:        ${date}
 * 
 * generator:   ${generator} ${version}
 *
 * 
 * THIS FILE HAS BEEN GENERATED, PLEASE DO NOT EDIT!
 */


package ${package};

import org.molgenis.framework.db.QueryRule;
import org.molgenis.framework.db.jdbc.JDBCMapper;
import backgroundions.data.types.${Name(view)};

/**
 * WATCH OUT: these views don't support inheritance yet!!!
 *
 */
public class ${Name(view)}Mapper implements JDBCMapper<${Name(view)}>
{
	@Override
	public ${Name(view)} create()
	{
		return new ${Name(view)}();
	}

	@Override
	public String createCountSql(QueryRule... rules)
	{

	}

	public String createFindSql(QueryRule ... rules)
	{	
		return "SELECT <#list viewFields(view) as f>${name(f.entity)}.${name(f)}<#if f_has_next>"
			  +", </#if></#list>"<#list viewFields(view,"xref") as f>
			  +", xref${f_index}.${name(f.getXRefLabelString())} AS ${name(f)}_${name(f.getXRefLabelString())}"</#list>
	<#--		  +" FROM ${name(entity)} "<#list superclasses(v)?reverse as superclass><#if name(superclass) != name(entity)>
			  +" INNER JOIN ${name(superclass)} ON (${name(entity)}.${pkeyname(entity)} = ${name(superclass)}.${pkeyname(entity)})"</#if>
		  
			  </#list>	-->
			  
			  <#list viewFields(view,"xref") as f>
			  <#assign xref_entity = model.getEntity(f.getXRefEntity())/> 
			  <#assign xref_field = xref_entity.getField(f.getXRefField())/>
			  <#assign xref_label = xref_entity.getAllField(f.getXRefLabelString()) /><#--can be from supertype!!-->
			  <#if name(xref_field.entity) != name(xref_label.entity)>+" LEFT JOIN ${name(xref_label.entity)} AS xref${f_index} ON ${name(f.getEntity())}.${name(f)}=xref${f_index}.${name(xref_field)}"
			  <#else>+" LEFT JOIN ${name(f.getXRefEntity())} AS xref${f_index} ON ${name(f.getEntity())}.${name(f)}=xref${f_index}.${name(xref_field)}"</#if></#list>
	}	

	@Override
	public List<${Name(view)}> createList(int size)
	{
		return new ArrayList<${Name(view)}>(size);
	}

	@Override
	public Database getDatabase()
	{

	}

	@Override
	public Type getFieldType(String fieldName)
	{

	}

	@Override
	public JDBCMapper getSuperTypeMapper()
	{

	}

	@Override
	public String getTableFieldName(String fieldName)
	{

	}


	@Override
	public int add(List<${Name(view)}> entities) throws SQLException, DatabaseException
	{
		throw new UnsupportedOperationException();
	}
	
	@Override
	public void mapMrefs(JDBCDatabase db, List<${Name(view)}> entities) throws DatabaseException
	{

		throw new UnsupportedOperationException();

	}

	@Override
	public void prepareFileAttachements(List<${Name(view)}> entities, File dir) throws IOException
	{
		throw new UnsupportedOperationException();

	}

	@Override
	public int remove(List<${Name(view)}> entities) throws SQLException
	{
		throw new UnsupportedOperationException();
	}

	@Override
	public void removeMrefs(JDBCDatabase db, List<${Name(view)}> entities) throws SQLException, IOException,
			DatabaseException
	{
		throw new UnsupportedOperationException();

	}

	@Override
	public void resolveForeignKeys(Database db, List<${Name(view)}> entities) throws DatabaseException, ParseException
	{
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean saveFileAttachements(List<${Name(view)}> entities, File dir) throws IOException
	{
		throw new UnsupportedOperationException();
	}

	@Override
	public void setAutogeneratedKey(int key, ${Name(view)} entity)
	{
		throw new UnsupportedOperationException();

	}

	@Override
	public void storeMrefs(JDBCDatabase db, List<${Name(view)}> entities) throws DatabaseException, IOException
	{
		throw new UnsupportedOperationException();

	}

	@Override
	public int update(List<${Name(view)}> entities) throws SQLException
	{
		throw new UnsupportedOperationException();
	}

}

